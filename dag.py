# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sedCHHfI5mBEjCi-xXQSfEbNlAIkPfUS
"""

# step 1 - import modules
import numpy as np
import pandas as pd 
from sklearn.impute import SimpleImputer 
from sklearn.neighbors import LocalOutlierFactor
import matplotlib.pyplot as plt
import seaborn as sns
import requests
import json

from airflow import DAG
from datetime import datetime
from datetime import date
# Operators; we need this to operate!
from airflow.operators.python_operator import PythonOperator


# step 2 - define default args
# These args will get passed on to each operator
# You can override them on a per-task basis during operator initialization
default_args = {
    'owner': 'airflow',
    'depends_on_past': False,
    'start_date': datetime(2020, 12, 13)
    }


# step 3 - instantiate DAG
dag = DAG(
    'covid-DAG',
    default_args=default_args,
    description='Fetch covid data from API',
    schedule_interval='@once',
)

# step 4 Define tasks
def store_data(**context):
    df = context['task_instance'].xcom_pull(task_ids='transform')
    df.to_csv("data/Countries.csv")


def extract_data(**kwargs):
    happiness_df = pd.read_csv("C:\Users\Karim\OneDrive\Documents\GitHub\project-milestone-1-data-engineering\data\Happiness_Dataset\2015.csv")
    happiness_df1 = pd.read_csv("C:\Users\Karim\OneDrive\Documents\GitHub\project-milestone-1-data-engineering\data\Happiness_Dataset\2016.csv")
    happiness_df2 = pd.read_csv("C:\Users\Karim\OneDrive\Documents\GitHub\project-milestone-1-data-engineering\data\Happiness_Dataset\2017.csv")
    happiness_df3 = pd.read_csv("C:\Users\Karim\OneDrive\Documents\GitHub\project-milestone-1-data-engineering\data\Happiness_Dataset\2018.csv")
    happiness_df4 = pd.read_csv("C:\Users\Karim\OneDrive\Documents\GitHub\project-milestone-1-data-engineering\data\Happiness_Dataset\2019.csv")
    df_life_expectancy = pd.read_csv("C:\Users\Karim\OneDrive\Documents\GitHub\project-milestone-1-data-engineering\data\Life Expectancy Data.csv")
    df_countries = pd.read_csv("C:\Users\Karim\OneDrive\Documents\GitHub\project-milestone-1-data-engineering\data\250 Country Data.csv")
    return [happiness_df,happiness_df1,happiness_df2,happiness_df3,happiness_df4,df_life_expectancy,df_countries]

def transform(**context):
  df = context['task_instance'].xcom_pull(task_ids='extract_data')
  happiness_df = df[0]
  happiness_df1 = df[1]
  happiness_df2 = df[2]
  happiness_df3 = df[3]
  happiness_df4 = df[4]
  df_life_expectancy = df[5]
  happiness_df['Year']= '2015'
  happiness_df = happiness_df.rename(columns={'Family': 'Social support'}) 
  happiness_df.drop('Standard Error',axis='columns', inplace=True)    
  happiness_df1['Year']= '2016'
  happiness_df1.drop('Lower Confidence Interval',axis='columns', inplace=True)
  happiness_df1.drop('Upper Confidence Interval',axis='columns', inplace=True)
  happiness_df1 = happiness_df1.rename(columns={'Family': 'Social support'})
  happiness_df2['Year']= '2017'
  happiness_df2 = happiness_df2.rename(columns={'Happiness.Rank': 'Happiness Rank', 'Happiness.Score': 'Happiness Score', 'Whisker.high': 'Upper Confidence Interval', 'Whisker.low': 'Lower Confidence Interval','Economy..GDP.per.Capita.': 'Economy (GDP per Capita)', 'Family': 'Social support','Health..Life.Expectancy.': 'Health (Life Expectancy)', 'Trust..Government.Corruption.': 'Trust (Government Corruption)','Dystopia.Residual': 'Dystopia Residual' })
  happiness_df2.drop('Lower Confidence Interval',axis='columns', inplace=True)
  happiness_df2.drop('Upper Confidence Interval',axis='columns', inplace=True)
  happiness_df3['Year']= '2018'
  happiness_df3 = happiness_df3.rename(columns={'Country or region': 'Country','Overall rank': 'Happiness Rank','Score': 'Happiness Score','GDP per capita': 'Economy (GDP per Capita)', 'Healthy life expectancy': 'Health (Life Expectancy)', 'Freedom to make life choices': 'Freedom', 'Perceptions of corruption': 'Trust (Government Corruption)'})
  happiness_df4['Year']= '2019'
  happiness_df4 = happiness_df4.rename(columns={'Country or region': 'Country','Overall rank': 'Happiness Rank','Score': 'Happiness Score','GDP per capita': 'Economy (GDP per Capita)', 'Healthy life expectancy': 'Health (Life Expectancy)', 'Freedom to make life choices': 'Freedom', 'Perceptions of corruption': 'Trust (Government Corruption)'})
  df_happiness = pd.concat([happiness_df, happiness_df1, happiness_df2, happiness_df3, happiness_df4], sort=False)
  df_life_expectancy.drop('Hepatitis B',axis='columns', inplace=True)
  df_life_expectancy.drop('Income composition of resources',axis='columns', inplace=True)
  df_life_expectancy.drop('Total expenditure',axis='columns', inplace=True)
  df_life_expectancy.drop('Schooling',axis='columns', inplace=True)
  df_life_expectancy.drop('Alcohol',axis='columns', inplace=True)
  df_life_expectancy.drop('Population',axis='columns', inplace=True)
  df_life_expectancy.drop(' BMI ',axis='columns', inplace=True)
  df_life_expectancy.drop('Polio',axis='columns', inplace=True)
  df_life_expectancy.drop('Diphtheria ',axis='columns', inplace=True)
  df_life_expectancy = df_life_expectancy.dropna()
  df_happiness_life_expect = pd.merge(df_happiness, df_life_expectancy, how='inner', left_on='Country', right_on='Country')
  return df_happiness_life_expect
    
  



t1 = PythonOperator(
    task_id='extract_data',
    provide_context=True,
    python_callable=extract_data,
    dag=dag,
)

t2 = PythonOperator(
    task_id='store_data',
    provide_context=True,
    python_callable=store_data,
    dag=dag,
)
t3 = PythonOperator(
    task_id='transform',
    provide_context=True,
    python_callable=transform,
    dag=dag,
)

# step 5 - define dependencies
t1 >> t3
t3 >> t2